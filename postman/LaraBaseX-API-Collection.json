{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "LaraBaseX API Collection",
		"description": "Comprehensive API collection for LaraBaseX - Laravel 12 + ReactJS Full Stack Boilerplate\n\n## üöÄ Quick Start Guide\n\n1. **Import Collection**: Import this collection into Postman\n2. **Set Environment**: Use the included environment or create your own\n3. **Test Authentication**: Run the Login ‚Üí Verify OTP flow\n4. **Explore APIs**: All endpoints are pre-configured and ready to test\n\n## üîê Authentication Flow\n\n1. **Register/Login** ‚Üí Get OTP sent to mobile\n2. **Verify OTP** ‚Üí Receive access token\n3. **Use Token** ‚Üí Set in environment variable for authenticated requests\n\n## üì± Environment Variables\n\n- `base_url`: API base URL (default: http://localhost:8001)\n- `access_token`: JWT token from login (auto-set after OTP verification)\n- `mobile_number`: Test mobile number (default: 9876543210)\n- `device_id`: Unique device identifier\n\n## ‚úÖ Pre-configured Features\n\n- Authentication flow with token management\n- Sample request data for all endpoints\n- Error handling examples\n- File upload examples\n- Real-time testing environment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Get App Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has app_version\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('app_version');",
									"});",
									"",
									"pm.test(\"Response has url\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('url');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/app-version",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"app-version"
							]
						},
						"description": "Get current application version and app store URL. No authentication required."
					},
					"response": []
				},
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"// Store mobile number for next requests",
									"pm.environment.set(\"mobile_number\", pm.request.body.raw ? JSON.parse(pm.request.body.raw).mobile : \"9876543210\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"mobile\": \"{{mobile_number}}\",\n    \"email\": \"dev@example.com\",\n    \"password\": \"Password123!\",\n    \"password_confirmation\": \"Password123!\",\n    \"device_id\": \"{{device_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						},
						"description": "Register a new user account. OTP will be sent to the provided mobile number for verification."
					},
					"response": []
				},
				{
					"name": "Login with Mobile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"console.log(\"üîê OTP sent! Check your mobile or server logs for the OTP code.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mobile\": \"{{mobile_number}}\",\n    \"device_id\": \"{{device_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						},
						"description": "Login with mobile number. OTP will be sent to the provided mobile number."
					},
					"response": []
				},
				{
					"name": "Verify OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has access_token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"    ",
									"    // Automatically set the token in environment",
									"    if (jsonData.access_token) {",
									"        pm.environment.set(\"access_token\", jsonData.access_token);",
									"        console.log(\"‚úÖ Access token automatically saved to environment!\");",
									"    }",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mobile\": \"{{mobile_number}}\",\n    \"otp\": \"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/verify-otp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"verify-otp"
							]
						},
						"description": "Verify OTP received via SMS. Returns access token for authenticated requests.\n\n**Note**: Check server logs for the actual OTP code or use default '1234' for testing."
					},
					"response": []
				},
				{
					"name": "Resend OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"mobile\": \"{{mobile_number}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/resend-otp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"resend-otp"
							]
						},
						"description": "Resend OTP to the specified mobile number."
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"// Clear the access token on successful logout",
									"pm.environment.unset(\"access_token\");",
									"console.log(\"üîì Access token cleared from environment.\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"logout"
							]
						},
						"description": "Logout the authenticated user and revoke the access token."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration, login, OTP verification, and logout.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Set default values if not already set",
							"if (!pm.environment.get(\"mobile_number\")) {",
							"    pm.environment.set(\"mobile_number\", \"9876543210\");",
							"}",
							"",
							"if (!pm.environment.get(\"device_id\")) {",
							"    pm.environment.set(\"device_id\", \"test-device-\" + Math.random().toString(36).substr(2, 9));",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "üë§ User Management",
			"item": [
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('first_name');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user"
							]
						},
						"description": "Get the authenticated user's profile information."
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response has updated user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"John Updated\",\n    \"last_name\": \"Doe Updated\",\n    \"email\": \"john.updated@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/user/update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								"update"
							]
						},
						"description": "Update the authenticated user's profile information."
					},
					"response": []
				},
				{
					"name": "Update Profile Photo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});",
									"",
									"pm.test(\"Response has updated user data with photo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('profile_photo_url');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "photo",
									"description": "Profile photo file (JPG, PNG, max 2MB)",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/user/update-photo",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"user",
								"update-photo"
							]
						},
						"description": "Upload or update the authenticated user's profile photo.\n\n**Instructions:**\n1. Select a photo file (JPG, PNG, max 2MB)\n2. The photo will be resized and optimized automatically\n3. Returns the updated user data with new profile photo URL"
					},
					"response": []
				}
			],
			"description": "User management endpoints for profile operations."
		},
		{
			"name": "üè† Home & Content",
			"item": [
				{
					"name": "Get Home Sliders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has sliders array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('sliders');",
									"    pm.expect(jsonData.sliders).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/sliders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"sliders"
							]
						},
						"description": "Get home page sliders for the mobile app dashboard."
					},
					"response": []
				}
			],
			"description": "Home page and content management endpoints."
		},
		{
			"name": "üìã Sample Requests",
			"item": [
				{
					"name": "üì± Complete Authentication Flow",
					"item": [
						{
							"name": "Step 1: Get App Version",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/app-version",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"app-version"
									]
								},
								"description": "First API call - check app version compatibility"
							},
							"response": []
						},
						{
							"name": "Step 2: Login with Mobile",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mobile\": \"{{mobile_number}}\",\n    \"device_id\": \"{{device_id}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"login"
									]
								},
								"description": "Send OTP to mobile number"
							},
							"response": []
						},
						{
							"name": "Step 3: Verify OTP & Get Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Auto-save token for subsequent requests",
											"if (pm.response.json().access_token) {",
											"    pm.environment.set(\"access_token\", pm.response.json().access_token);",
											"    console.log(\"‚úÖ Token saved automatically!\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mobile\": \"{{mobile_number}}\",\n    \"otp\": \"1234\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/verify-otp",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"verify-otp"
									]
								},
								"description": "Verify OTP and get access token (auto-saved to environment)"
							},
							"response": []
						},
						{
							"name": "Step 4: Test Authenticated Request",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{access_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{base_url}}/api/user",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"user"
									]
								},
								"description": "Test authenticated request with saved token"
							},
							"response": []
						}
					],
					"description": "Complete step-by-step authentication flow for mobile app integration"
				},
				{
					"name": "‚ùå Error Handling Examples",
					"item": [
						{
							"name": "400 - Validation Error",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mobile\": \"invalid\",\n    \"device_id\": \"\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"login"
									]
								},
								"description": "Example of validation error with invalid mobile number"
							},
							"response": []
						},
						{
							"name": "401 - Unauthorized",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid-token"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{base_url}}/api/user",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"user"
									]
								},
								"description": "Example of unauthorized error with invalid token"
							},
							"response": []
						}
					],
					"description": "Examples of common error responses for testing error handling"
				}
			],
			"description": "Sample requests and complete workflow examples for testing and integration"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script to set up environment",
					"if (!pm.environment.get(\"base_url\")) {",
					"    pm.environment.set(\"base_url\", \"http://localhost:8001\");",
					"}",
					"",
					"// Add timestamp for unique device IDs",
					"pm.globals.set(\"timestamp\", new Date().getTime().toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script for common response validation",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Response headers contain Content-Type\", function () {",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"json\");",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8001",
			"type": "string"
		},
		{
			"key": "mobile_number",
			"value": "9876543210",
			"type": "string"
		},
		{
			"key": "device_id",
			"value": "test-device-postman",
			"type": "string"
		}
	]
}
